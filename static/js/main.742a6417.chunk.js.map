{"version":3,"sources":["components/Spinner.js","components/Input.js","components/Top.js","store/actions/actions.js","components/Trivia.js","components/Modal.js","App.js","serviceWorker.js","store/reducers/rootReducer.js","index.js"],"names":["Spinner","color","className","Input","value","handleChange","handleSubmit","onSubmit","autoComplete","onChange","type","id","htmlFor","Top","score","api","getPoke","min","max","randomPoke","Math","ceil","floor","random","dispatch","getState","url","axios","get","then","response","payload","data","catch","error","Trivia","state","answer","event","preventDefault","props","submitAnswer","openModal","target","reset","setState","this","entry","Component","connect","action","message","toLowerCase","console","log","Modal","options","onCloseEnd","closeModal","inDuration","outDuration","opacity","dismissible","startingTop","endingTop","M","init","getInstance","open","modal","pokeName","pokeDesc","pokeSpriteUrl","ref","charAt","toUpperCase","slice","alt","src","App","question","currentState","shinyEncounter","abs","res","poke","natural","sprites","front_shiny","front_default","err","Boolean","window","location","hostname","match","initState","cleanEntry","flavorTextEntries","name","ame","substr","regex","RegExp","replace","rootReducer","flavor_text_entries","find","language","flavor_text","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.742a6417.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Spinner = ({ color }) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"preloader-wrapper big active\">\r\n        <div className={`spinner-layer spinner-${color}-only`}>\r\n          <div className=\"circle-clipper left\">\r\n            <div className=\"circle\"></div>\r\n          </div>\r\n          <div className=\"gap-patch\">\r\n            <div className=\"circle\"></div>\r\n          </div>\r\n          <div className=\"circle-clipper right\">\r\n            <div className=\"circle\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\r\n\r\nconst Input = ({ value, handleChange, handleSubmit }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"center\">\r\n      <div className=\"input-field\">\r\n        <input\r\n          autoComplete=\"off\"\r\n          onChange={handleChange}\r\n          value={value}\r\n          type=\"text\"\r\n          id=\"answer\"\r\n        ></input>\r\n        <label htmlFor=\"answer\">Answer</label>\r\n      </div>\r\n      <button className=\"btn red z-depth-0\">Submit</button>\r\n    </form>\r\n  );\r\n};\r\nexport default Input;\r\n","import React from \"react\";\r\n\r\nconst Top = ({ score }) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <span className=\"card-title\">\r\n        <div className=\"left\">PokeTrivia</div>\r\n        <div className=\"right-align\">Score: {score}</div>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Top;\r\n","import axios from \"axios\";\r\n\r\nconst api = \"https://pokeapi.co/api/v2/\";\r\nconst pokeSpecies = \"pokemon-species/\";\r\nconst pokemon = \"pokemon/\";\r\n\r\nexport const submitAnswer = answer => {\r\n  return (dispatch, getState) => {\r\n    const currentState = getState();\r\n    var action = {\r\n      type: \"\",\r\n      payload: {\r\n        message: \"\",\r\n        color: \"\"\r\n      }\r\n    };\r\n    if (currentState.answer === answer.toLowerCase()) {\r\n      action.type = \"ANSWER_CORRECT\";\r\n      action.payload.message = \"Answer is correct!\";\r\n      action.payload.color = \"green\";\r\n    } else {\r\n      action.type = \"ANSWER_INCORRECT\";\r\n      action.payload.message = \"Answer is incorrect!\";\r\n      action.payload.color = \"red\";\r\n    }\r\n    console.log(\"Action is \", action);\r\n    dispatch(action);\r\n  };\r\n};\r\n\r\nfunction getRandomIntInclusive(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min; //The maximum is inclusive and the minimum is inclusive\r\n}\r\n\r\n/** Literally from 1 to 807 because PokeAPI hasn't added SwSh stuff **/\r\n\r\nexport const getPoke = () => {\r\n  const randomPoke = getRandomIntInclusive(1, 807);\r\n  return (dispatch, getState) => {\r\n    const url = api + pokeSpecies + randomPoke;\r\n    return axios\r\n      .get(url)\r\n      .then(response => {\r\n        dispatch({\r\n          type: \"GET_POKE\",\r\n          payload: response.data\r\n        });\r\n      })\r\n      .catch(error => {\r\n        dispatch({\r\n          type: \"GET_POKE_ERROR\",\r\n          error\r\n        });\r\n      });\r\n  };\r\n};\r\n\r\nexport const openModal = () => {\r\n  return (dispatch, getState) => {\r\n    const currentState = getState();\r\n    const url = api + pokemon + currentState.answer;\r\n    const shinyEncounter = Math.abs(Math.random() - 1.0 / 1365.33) < 0.1;\r\n    return axios\r\n      .get(url)\r\n      .then(res => {\r\n        var poke = res.data;\r\n        var action = {\r\n          type: \"OPEN_MODAL\",\r\n          payload: {\r\n            pokeName: currentState.answer,\r\n            pokeDesc: currentState.natural,\r\n            pokeSpriteUrl: shinyEncounter\r\n              ? poke.sprites.front_shiny\r\n              : poke.sprites.front_default\r\n          }\r\n        };\r\n        dispatch(action);\r\n      })\r\n      .catch(error => dispatch({ type: \"OPEN_MODAL_ERROR\", err: error }));\r\n  };\r\n};\r\n\r\nexport const closeModal = () => {\r\n  return (dispatch, getState) => {\r\n    dispatch({\r\n      type: \"CLOSE_MODAL\"\r\n    });\r\n  };\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nimport Spinner from \"./Spinner\";\r\nimport Input from \"./Input\";\r\nimport Top from \"./Top\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { submitAnswer } from \"../store/actions/actions\";\r\n\r\nexport class Trivia extends Component {\r\n  state = {\r\n    answer: \"\"\r\n  };\r\n\r\n  render() {\r\n    const { score, entry } = this.props;\r\n    return (\r\n      <div className=\"card small yellow darken-3\">\r\n        <Top score={score} />\r\n        <div className=\"card-content\">\r\n          <div className=\"center\">\r\n            {entry ? <p>{entry}</p> : <Spinner color=\"red\" />}\r\n          </div>\r\n        </div>\r\n        <div className=\"card-action\">\r\n          <Input\r\n            value={this.state.value}\r\n            handleChange={this.handleChange}\r\n            handleSubmit={this.handleSubmit}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    this.props.submitAnswer(this.state.answer);\r\n    this.props.openModal();\r\n    event.target.reset();\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      answer: event.target.value\r\n    });\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    submitAnswer: answer => {\r\n      dispatch(submitAnswer(answer));\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Trivia);\r\n","import React, { Component } from \"react\";\r\nimport M from \"materialize-css\";\r\nimport Spinner from \"./Spinner\";\r\n\r\nclass Modal extends Component {\r\n  options = {\r\n    onCloseEnd: () => {\r\n      this.props.closeModal();\r\n      this.props.getPoke();\r\n    },\r\n    inDuration: 250,\r\n    outDuration: 250,\r\n    opacity: 0.7,\r\n    dismissible: true,\r\n    startingTop: \"4%\",\r\n    endingTop: \"10%\"\r\n  };\r\n  componentDidMount() {\r\n    M.Modal.init(this.Modal, this.options);\r\n    let instance = M.Modal.getInstance(this.Modal);\r\n    instance.open();\r\n  }\r\n  render() {\r\n    console.log(\"Modal props\", this.props);\r\n    const {\r\n      message,\r\n      color,\r\n      pokeName,\r\n      pokeDesc,\r\n      pokeSpriteUrl\r\n    } = this.props.modal;\r\n    return (\r\n      <div>\r\n        <div\r\n          ref={Modal => {\r\n            this.Modal = Modal;\r\n          }}\r\n          id=\"modal1\"\r\n          className=\"modal bottom-sheet\"\r\n        >\r\n          <div className={\"modal-content center \" + color}>\r\n            <h4 className=\"center\">\r\n              {message && pokeName\r\n                ? message +\r\n                  \" \" +\r\n                  (pokeName.charAt(0).toUpperCase() + pokeName.slice(1))\r\n                : \"Loading..\"}\r\n            </h4>\r\n            <img\r\n              alt={pokeName && \"Image of \" + pokeName.toUpperCase()}\r\n              src={pokeSpriteUrl}\r\n            ></img>\r\n            <div>\r\n              {pokeDesc ? <p>{pokeDesc}</p> : <Spinner color=\"yellow\" />}\r\n            </div>\r\n          </div>\r\n          <div className={color && \"modal-footer \" + color}>\r\n            <button\r\n              className={\r\n                color && \"modal-close waves-effect btn-flat waves-\" + color\r\n              }\r\n            >\r\n              Got It!\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","import Trivia from \"./components/Trivia\";\r\nimport Modal from \"./components/Modal\";\r\nimport { getPoke, closeModal, openModal } from \"./store/actions/actions\";\r\n\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nexport class App extends Component {\r\n  componentDidMount() {\r\n    this.props.getPoke();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App container\">\r\n        <Trivia\r\n          question={this.props.question}\r\n          score={this.props.score}\r\n          entry={this.props.entry}\r\n          openModal={() => this.props.openModal()}\r\n        />\r\n        {this.props.modal && (\r\n          <Modal\r\n            getPoke={() => this.props.getPoke()}\r\n            closeModal={() => this.props.closeModal()}\r\n            modal={this.props.modal}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getPoke: () => dispatch(getPoke()),\r\n    closeModal: () => dispatch(closeModal()),\r\n    openModal: () => dispatch(openModal())\r\n  };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    ...state,\r\n    answer: null\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","var initState = {\r\n  entry: \"\",\r\n  answer: \"\",\r\n  score: 0,\r\n  question: 0,\r\n  modal: null\r\n};\r\nconst cleanEntry = (flavorTextEntries, name) => {\r\n  const ame = name.substr(1);\r\n  const regex = new RegExp(ame, \"g\");\r\n  const replacedFTE = flavorTextEntries.replace(regex, \"____ \");\r\n  return replacedFTE;\r\n};\r\nconst rootReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case \"ANSWER_CORRECT\":\r\n      const score = state.score + 1;\r\n      return {\r\n        ...state,\r\n        modal: {\r\n          ...action.payload\r\n        },\r\n        score\r\n      };\r\n    case \"ANSWER_INCORRECT\":\r\n      return {\r\n        ...state,\r\n        modal: {\r\n          ...action.payload\r\n        }\r\n      };\r\n    case \"GET_POKE\":\r\n      var question = state.question + 1;\r\n      const { name } = action.payload;\r\n      const natural = action.payload.flavor_text_entries.find(entry => {\r\n        return entry.language.name === \"en\";\r\n      }).flavor_text;\r\n      const entry = cleanEntry(natural, name);\r\n      return {\r\n        ...state,\r\n        answer: name,\r\n        natural,\r\n        entry,\r\n        question\r\n      };\r\n    case \"CLOSE_MODAL\":\r\n      return {\r\n        ...state,\r\n        modal: null\r\n      };\r\n    case \"OPEN_MODAL\":\r\n      return {\r\n        ...state,\r\n        entry: \"\",\r\n        modal: {\r\n          ...state.modal,\r\n          ...action.payload\r\n        }\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\n\nimport thunk from \"redux-thunk\";\n\nimport \"materialize-css/dist/css/materialize.min.css\";\nimport \"materialize-css/dist/js/materialize\";\n\nimport rootReducer from \"./store/reducers/rootReducer\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}